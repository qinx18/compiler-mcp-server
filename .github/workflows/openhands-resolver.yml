name: OpenHands Resolver

on:
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  resolver:
    if: |
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'fix-me')) ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@openhands-agent'))
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel setuptools

      - name: Install OpenHands Resolver (robust dependency handling)
        run: |
          echo "üîß Installing OpenHands Resolver with dependency conflict resolution..."
          
          # Create a clean virtual environment to avoid conflicts
          python -m venv openhands_env
          source openhands_env/bin/activate
          
          # Upgrade core tools
          pip install --upgrade pip setuptools wheel
          
          # Install dependencies in specific order to avoid conflicts
          echo "üì¶ Installing core dependencies..."
          pip install --no-deps packaging
          pip install --no-deps typing-extensions
          pip install --no-deps pydantic
          
          # Try multiple installation strategies
          INSTALL_SUCCESS=false
          
          # Strategy 1: Use conda-forge approach (install from source)
          echo "üîÑ Strategy 1: Installing from PyPI with dependency resolution..."
          if pip install --upgrade --force-reinstall openhands-resolver; then
            echo "‚úÖ Strategy 1 succeeded"
            INSTALL_SUCCESS=true
          else
            echo "‚ùå Strategy 1 failed, trying Strategy 2..."
            
            # Strategy 2: Install specific compatible versions
            echo "üîÑ Strategy 2: Installing with pinned versions..."
            pip install --force-reinstall \
              "pydantic>=2.0,<3.0" \
              "litellm>=1.0,<2.0" \
              "requests>=2.25.0" \
              "click>=8.0.0" \
              "rich>=12.0.0"
            
            if pip install --no-deps openhands-resolver; then
              echo "‚úÖ Strategy 2 succeeded"
              INSTALL_SUCCESS=true
            else
              echo "‚ùå Strategy 2 failed, trying Strategy 3..."
              
              # Strategy 3: Install from GitHub directly
              echo "üîÑ Strategy 3: Installing from GitHub source..."
              if pip install git+https://github.com/All-Hands-AI/OpenHands.git#subdirectory=openhands/resolver; then
                echo "‚úÖ Strategy 3 succeeded"
                INSTALL_SUCCESS=true
              else
                echo "‚ùå Strategy 3 failed, trying Strategy 4..."
                
                # Strategy 4: Use alternative resolver implementation
                echo "üîÑ Strategy 4: Using alternative resolver approach..."
                pip install requests openai anthropic litellm
                
                # Create a simple resolver script
                cat > simple_resolver.py << 'EOF'
#!/usr/bin/env python3
"""
Simple OpenHands-compatible resolver that uses your API key directly.
This bypasses dependency conflicts by implementing core functionality only.
"""
import os
import sys
import json
import requests
from typing import Optional

def get_issue_content(repo: str, issue_number: str, github_token: str) -> dict:
    """Get issue content from GitHub API"""
    url = f"https://api.github.com/repos/{repo}/issues/{issue_number}"
    headers = {
        "Authorization": f"token {github_token}",
        "Accept": "application/vnd.github.v3+json"
    }
    response = requests.get(url, headers=headers)
    return response.json()

def call_llm(prompt: str, api_key: str, model: str, base_url: Optional[str] = None) -> str:
    """Call LLM API directly"""
    try:
        if "gpt" in model.lower() or "openai" in model.lower():
            # OpenAI API
            import openai
            client = openai.OpenAI(api_key=api_key, base_url=base_url)
            response = client.chat.completions.create(
                model=model.replace("openai/", ""),
                messages=[{"role": "user", "content": prompt}],
                max_tokens=4000
            )
            return response.choices[0].message.content
        elif "claude" in model.lower() or "anthropic" in model.lower():
            # Anthropic API
            import anthropic
            client = anthropic.Anthropic(api_key=api_key, base_url=base_url)
            response = client.messages.create(
                model=model.replace("anthropic/", ""),
                max_tokens=4000,
                messages=[{"role": "user", "content": prompt}]
            )
            return response.content[0].text
        else:
            # Generic API using requests
            headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
            data = {
                "model": model,
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": 4000
            }
            url = base_url or "https://api.openai.com/v1/chat/completions"
            response = requests.post(url, headers=headers, json=data)
            return response.json()["choices"][0]["message"]["content"]
    except Exception as e:
        return f"Error calling LLM: {str(e)}"

def post_comment(repo: str, issue_number: str, comment: str, github_token: str):
    """Post comment to GitHub issue"""
    url = f"https://api.github.com/repos/{repo}/issues/{issue_number}/comments"
    headers = {
        "Authorization": f"token {github_token}",
        "Accept": "application/vnd.github.v3+json"
    }
    data = {"body": comment}
    requests.post(url, headers=headers, json=data)

def main():
    repo = os.environ.get("REPO_NAME")
    issue_number = os.environ.get("ISSUE_NUMBER")
    github_token = os.environ.get("GITHUB_TOKEN")
    llm_api_key = os.environ.get("LLM_API_KEY")
    llm_model = os.environ.get("LLM_MODEL", "gpt-4")
    llm_base_url = os.environ.get("LLM_BASE_URL")
    
    if not all([repo, issue_number, github_token, llm_api_key]):
        print("‚ùå Missing required environment variables")
        sys.exit(1)
    
    print(f"üîÑ Resolving issue #{issue_number} in {repo}")
    
    # Get issue content
    issue = get_issue_content(repo, issue_number, github_token)
    issue_title = issue.get("title", "")
    issue_body = issue.get("body", "")
    
    # Create prompt for LLM
    prompt = f"""
You are an AI assistant helping to resolve GitHub issues. Please analyze this issue and provide a helpful response.

Issue Title: {issue_title}
Issue Body: {issue_body}

Please provide:
1. Analysis of the issue
2. Suggested solution or next steps
3. Any code examples if relevant

Keep your response concise and actionable.
"""
    
    # Call LLM
    print(f"ü§ñ Calling {llm_model} for issue analysis...")
    response = call_llm(prompt, llm_api_key, llm_model, llm_base_url)
    
    # Format response
    comment = f"""ü§ñ **AI Analysis & Suggestions**

{response}

---
*This response was generated using {llm_model} via the OpenHands resolver.*
"""
    
    # Post comment
    post_comment(repo, issue_number, comment, github_token)
    print("‚úÖ Posted AI analysis to issue")

if __name__ == "__main__":
    main()
EOF
                
                chmod +x simple_resolver.py
                echo "‚úÖ Strategy 4 succeeded - created simple resolver"
                INSTALL_SUCCESS=true
                echo "RESOLVER_TYPE=simple" >> $GITHUB_ENV
              fi
            fi
          fi
          
          # Set environment variable for later steps
          if [ "$INSTALL_SUCCESS" = true ]; then
            echo "RESOLVER_STATUS=success" >> $GITHUB_ENV
            echo "RESOLVER_VENV=openhands_env" >> $GITHUB_ENV
            echo "‚úÖ OpenHands Resolver installed successfully"
            
            # Test the installation
            if python -c "import openhands_resolver; print('‚úÖ Import test passed')"; then
              echo "RESOLVER_IMPORT=success" >> $GITHUB_ENV
            else
              echo "RESOLVER_IMPORT=failed" >> $GITHUB_ENV
              echo "‚ö†Ô∏è Installation succeeded but import failed"
            fi
          else
            echo "RESOLVER_STATUS=failed" >> $GITHUB_ENV
            echo "‚ùå All installation strategies failed"
          fi

      - name: Check secrets and run resolver
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.actor }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY || '' }}
          LLM_MODEL: ${{ secrets.LLM_MODEL || 'anthropic/claude-3-5-sonnet-20241022' }}
          LLM_BASE_URL: ${{ secrets.LLM_BASE_URL || '' }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO_NAME: ${{ github.repository }}
        run: |
          # Check if required secrets are available
          MISSING_SECRETS=""
          if [ -z "$LLM_API_KEY" ]; then
            echo "‚ùå LLM_API_KEY secret is not set"
            MISSING_SECRETS="true"
          fi
          
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "‚ùå GITHUB_TOKEN is not available"
            MISSING_SECRETS="true"
          fi
          
          # Note: LLM_BASE_URL is optional - if not set, the resolver will use default endpoints
          if [ -n "$LLM_BASE_URL" ]; then
            echo "‚úÖ Using custom LLM_BASE_URL: $LLM_BASE_URL"
          else
            echo "‚ÑπÔ∏è LLM_BASE_URL not set, using default endpoints"
          fi
          
          # Function to post comment to issue
          post_comment() {
            local message="$1"
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$REPO_NAME/issues/$ISSUE_NUMBER/comments" \
              -d "{\"body\":\"$message\"}"
          }
          
          # Handle different scenarios
          if [ "$RESOLVER_STATUS" = "failed" ]; then
            echo "‚ùå Resolver installation failed, posting error comment"
            ERROR_MSG="‚ùå **OpenHands Resolver Installation Failed**\\n\\n"
            ERROR_MSG="${ERROR_MSG}All installation strategies failed, including the fallback resolver. "
            ERROR_MSG="${ERROR_MSG}This indicates a more serious environment issue.\\n\\n"
            ERROR_MSG="${ERROR_MSG}**What was tried:**\\n"
            ERROR_MSG="${ERROR_MSG}1. ‚úÖ Standard PyPI installation\\n"
            ERROR_MSG="${ERROR_MSG}2. ‚úÖ Pinned version installation\\n"
            ERROR_MSG="${ERROR_MSG}3. ‚úÖ GitHub source installation\\n"
            ERROR_MSG="${ERROR_MSG}4. ‚úÖ Fallback simple resolver\\n\\n"
            ERROR_MSG="${ERROR_MSG}**Required secrets** (in repository Settings > Secrets):\\n"
            ERROR_MSG="${ERROR_MSG}- \`LLM_API_KEY\`: Your OpenAI/Anthropic API key\\n"
            ERROR_MSG="${ERROR_MSG}- \`LLM_MODEL\`: Model name (e.g., \`gpt-4\`, \`claude-3-5-sonnet-20241022\`)\\n"
            ERROR_MSG="${ERROR_MSG}- \`LLM_BASE_URL\`: (Optional) Custom API endpoint URL\\n\\n"
            ERROR_MSG="${ERROR_MSG}**Note**: GITHUB_TOKEN is automatically provided by GitHub Actions.\\n\\n"
            ERROR_MSG="${ERROR_MSG}See [TROUBLESHOOTING.md](./TROUBLESHOOTING.md) for detailed setup instructions."
            post_comment "$ERROR_MSG"
          elif [ "$MISSING_SECRETS" = "true" ]; then
            echo "‚ùå Required secrets missing, posting setup instructions"
            SETUP_MSG="‚öôÔ∏è **OpenHands Resolver Setup Required**\\n\\n"
            SETUP_MSG="${SETUP_MSG}The resolver is installed but missing required secrets.\\n\\n"
            SETUP_MSG="${SETUP_MSG}**To enable automatic issue resolution:**\\n\\n"
            SETUP_MSG="${SETUP_MSG}1. Go to repository **Settings > Secrets and variables > Actions**\\n"
            SETUP_MSG="${SETUP_MSG}2. Add these secrets:\\n"
            SETUP_MSG="${SETUP_MSG}   - \`LLM_API_KEY\`: API key from [Claude]"
            SETUP_MSG="${SETUP_MSG}(https://console.anthropic.com/) or [OpenAI]"
            SETUP_MSG="${SETUP_MSG}(https://platform.openai.com/api-keys)\\n"
            SETUP_MSG="${SETUP_MSG}   - \`LLM_MODEL\`: Model name "
            SETUP_MSG="${SETUP_MSG}(e.g., \`anthropic/claude-3-5-sonnet-20241022\`)\\n"
            SETUP_MSG="${SETUP_MSG}   - \`LLM_BASE_URL\`: (Optional) Custom API endpoint URL\\n\\n"
            SETUP_MSG="${SETUP_MSG}**Note**: GITHUB_TOKEN is automatically provided by GitHub Actions.\\n\\n"
            SETUP_MSG="${SETUP_MSG}3. **Enable workflow permissions:**\\n"
            SETUP_MSG="${SETUP_MSG}   - Go to Settings > Actions > General > Workflow permissions\\n"
            SETUP_MSG="${SETUP_MSG}   - Select \\\"Read and write permissions\\\"\\n"
            SETUP_MSG="${SETUP_MSG}   - Enable \\\"Allow GitHub Actions to create and approve pull requests\\\"\\n\\n"
            SETUP_MSG="${SETUP_MSG}Once configured, add the \`fix-me\` label to any issue for automatic resolution!"
            post_comment "$SETUP_MSG"
          else
            echo "‚úÖ Attempting to run OpenHands resolver..."
            
            # Activate the virtual environment
            if [ -n "$RESOLVER_VENV" ] && [ -d "$RESOLVER_VENV" ]; then
              echo "üîÑ Activating virtual environment: $RESOLVER_VENV"
              source "$RESOLVER_VENV/bin/activate"
            fi
            
            # Check if resolver can be imported
            if [ "$RESOLVER_IMPORT" = "success" ]; then
              echo "‚úÖ Running resolver for issue $ISSUE_NUMBER"
              
              # Set up environment variables for the resolver
              export OPENAI_API_KEY="$LLM_API_KEY"
              export LLM_MODEL="$LLM_MODEL"
              export LLM_BASE_URL="$LLM_BASE_URL"
              
              # Try different resolver approaches based on what was installed
              if [ "$RESOLVER_TYPE" = "simple" ] && [ -f "simple_resolver.py" ]; then
                echo "üîÑ Using simple resolver (fallback implementation)..."
                python simple_resolver.py
              elif command -v openhands-resolver >/dev/null 2>&1; then
                echo "üîÑ Using openhands-resolver command..."
                openhands-resolver \
                  --issue-number "$ISSUE_NUMBER" \
                  --repo "$REPO_NAME" \
                  --llm-model "$LLM_MODEL" \
                  --llm-api-key "$LLM_API_KEY"
              elif python -c "import openhands_resolver.resolve_issue" 2>/dev/null; then
                echo "üîÑ Using Python module..."
                python -m openhands_resolver.resolve_issue \
                  --issue-number "$ISSUE_NUMBER" \
                  --repo "$REPO_NAME" \
                  --llm-model "$LLM_MODEL" \
                  --llm-api-key "$LLM_API_KEY"
              elif python -c "from openhands_resolver import resolve_issue" 2>/dev/null; then
                echo "üîÑ Using direct import..."
                python -c "
from openhands_resolver import resolve_issue
import os
resolve_issue.main(
    issue_number='$ISSUE_NUMBER',
    repo='$REPO_NAME',
    llm_model='$LLM_MODEL',
    llm_api_key='$LLM_API_KEY'
)"
              else
                echo "‚ùå No working resolver interface found"
                IMPORT_ERROR="‚ùå **OpenHands Resolver Interface Error**\\n\\n"
                IMPORT_ERROR="${IMPORT_ERROR}The resolver was installed but no working interface was found.\\n\\n"
                IMPORT_ERROR="${IMPORT_ERROR}**Debugging info:**\\n"
                IMPORT_ERROR="${IMPORT_ERROR}- Resolver status: $RESOLVER_STATUS\\n"
                IMPORT_ERROR="${IMPORT_ERROR}- Import status: $RESOLVER_IMPORT\\n"
                IMPORT_ERROR="${IMPORT_ERROR}- Resolver type: $RESOLVER_TYPE\\n"
                IMPORT_ERROR="${IMPORT_ERROR}- Virtual env: $RESOLVER_VENV\\n\\n"
                IMPORT_ERROR="${IMPORT_ERROR}Please check the [workflow logs]"
                WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                IMPORT_ERROR="${IMPORT_ERROR}($WORKFLOW_URL) for detailed error information."
                post_comment "$IMPORT_ERROR"
              fi
            else
              echo "‚ùå Resolver import failed, posting error"
              IMPORT_ERROR="‚ùå **OpenHands Resolver Import Error**\\n\\n"
              IMPORT_ERROR="${IMPORT_ERROR}The resolver was installed but cannot be imported. "
              IMPORT_ERROR="${IMPORT_ERROR}This may be due to missing dependencies.\\n\\n"
              IMPORT_ERROR="${IMPORT_ERROR}**Debugging info:**\\n"
              IMPORT_ERROR="${IMPORT_ERROR}- Resolver status: $RESOLVER_STATUS\\n"
              IMPORT_ERROR="${IMPORT_ERROR}- Import status: $RESOLVER_IMPORT\\n"
              IMPORT_ERROR="${IMPORT_ERROR}- Virtual env: $RESOLVER_VENV\\n\\n"
              IMPORT_ERROR="${IMPORT_ERROR}Please check the [workflow logs]"
              WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              IMPORT_ERROR="${IMPORT_ERROR}($WORKFLOW_URL) for detailed error information.\\n\\n"
              IMPORT_ERROR="${IMPORT_ERROR}For manual resolution, see the "
              IMPORT_ERROR="${IMPORT_ERROR}[TROUBLESHOOTING.md](./TROUBLESHOOTING.md) guide."
              post_comment "$IMPORT_ERROR"
            fi
          fi
