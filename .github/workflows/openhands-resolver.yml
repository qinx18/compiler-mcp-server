name: OpenHands Resolver

on:
  issues:
    types: [opened, labeled]
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  resolver:
    if: |
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'fix-me')) ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@openhands-agent'))
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel setuptools

      - name: Install OpenHands Resolver (with fallback)
        run: |
          # Try multiple installation strategies to handle dependency conflicts
          pip install --upgrade pip setuptools wheel
          
          # Strategy 1: Try with specific working versions to avoid conflicts
          echo "Trying specific version combination..."
          if pip install "openhands-resolver==0.3.1" "openhands-ai==0.13.1" --force-reinstall; then
            echo "✅ Installed with specific versions"
            echo "RESOLVER_STATUS=success" >> $GITHUB_ENV
          elif pip install "openhands-resolver==0.2.9" --force-reinstall; then
            echo "✅ Installed older version"
            echo "RESOLVER_STATUS=success" >> $GITHUB_ENV
          else
            echo "❌ Standard installation failed, trying alternative approach..."
            # Strategy 2: Install in isolated environment
            python -m venv resolver_venv
            source resolver_venv/bin/activate
            pip install --upgrade pip
            if pip install openhands-resolver; then
              echo "✅ Installed in virtual environment"
              echo "RESOLVER_STATUS=venv" >> $GITHUB_ENV
            else
              echo "❌ All installation strategies failed"
              echo "RESOLVER_STATUS=failed" >> $GITHUB_ENV
            fi
          fi

      - name: Check secrets and run resolver
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.actor }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY || '' }}
          LLM_MODEL: ${{ secrets.LLM_MODEL || 'anthropic/claude-3-5-sonnet-20241022' }}
          LLM_BASE_URL: ${{ secrets.LLM_BASE_URL || '' }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO_NAME: ${{ github.repository }}
        run: |
          # Check if required secrets are available
          MISSING_SECRETS=""
          if [ -z "$LLM_API_KEY" ]; then
            echo "❌ LLM_API_KEY secret is not set"
            MISSING_SECRETS="true"
          fi
          
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "❌ GITHUB_TOKEN is not available"
            MISSING_SECRETS="true"
          fi
          
          # Note: LLM_BASE_URL is optional - if not set, the resolver will use default endpoints
          if [ -n "$LLM_BASE_URL" ]; then
            echo "✅ Using custom LLM_BASE_URL: $LLM_BASE_URL"
          else
            echo "ℹ️ LLM_BASE_URL not set, using default endpoints"
          fi
          
          # Function to post comment to issue
          post_comment() {
            local message="$1"
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$REPO_NAME/issues/$ISSUE_NUMBER/comments" \
              -d "{\"body\":\"$message\"}"
          }
          
          # Handle different scenarios
          if [ "$RESOLVER_STATUS" = "failed" ]; then
            echo "❌ Resolver installation failed, posting error comment"
            ERROR_MSG="❌ **OpenHands Resolver Installation Failed**\\n\\n"
            ERROR_MSG="${ERROR_MSG}The resolver encountered dependency conflicts during installation. "
            ERROR_MSG="${ERROR_MSG}This is a known issue with the current version.\\n\\n"
            ERROR_MSG="${ERROR_MSG}**Possible solutions:**\\n"
            ERROR_MSG="${ERROR_MSG}1. Check if newer versions are available\\n"
            ERROR_MSG="${ERROR_MSG}2. Set up the required secrets (see below)\\n"
            ERROR_MSG="${ERROR_MSG}3. Try manual resolution using the instructions in the README\\n\\n"
            ERROR_MSG="${ERROR_MSG}**Required secrets** (in repository Settings > Secrets):\\n"
            ERROR_MSG="${ERROR_MSG}- \`LLM_API_KEY\`: API key for your LLM service (Claude, OpenAI, etc.)\\n"
            ERROR_MSG="${ERROR_MSG}- \`LLM_MODEL\`: Model name (e.g., \`anthropic/claude-3-5-sonnet-20241022\`)\\n"
            ERROR_MSG="${ERROR_MSG}- \`LLM_BASE_URL\`: (Optional) Custom API endpoint URL\\n\\n"
            ERROR_MSG="${ERROR_MSG}**Note**: GITHUB_TOKEN is automatically provided by GitHub Actions.\\n\\n"
            ERROR_MSG="${ERROR_MSG}See [TROUBLESHOOTING.md](./TROUBLESHOOTING.md) for detailed setup instructions."
            post_comment "$ERROR_MSG"
          elif [ "$MISSING_SECRETS" = "true" ]; then
            echo "❌ Required secrets missing, posting setup instructions"
            SETUP_MSG="⚙️ **OpenHands Resolver Setup Required**\\n\\n"
            SETUP_MSG="${SETUP_MSG}The resolver is installed but missing required secrets.\\n\\n"
            SETUP_MSG="${SETUP_MSG}**To enable automatic issue resolution:**\\n\\n"
            SETUP_MSG="${SETUP_MSG}1. Go to repository **Settings > Secrets and variables > Actions**\\n"
            SETUP_MSG="${SETUP_MSG}2. Add these secrets:\\n"
            SETUP_MSG="${SETUP_MSG}   - \`LLM_API_KEY\`: API key from [Claude]"
            SETUP_MSG="${SETUP_MSG}(https://console.anthropic.com/) or [OpenAI]"
            SETUP_MSG="${SETUP_MSG}(https://platform.openai.com/api-keys)\\n"
            SETUP_MSG="${SETUP_MSG}   - \`LLM_MODEL\`: Model name "
            SETUP_MSG="${SETUP_MSG}(e.g., \`anthropic/claude-3-5-sonnet-20241022\`)\\n"
            SETUP_MSG="${SETUP_MSG}   - \`LLM_BASE_URL\`: (Optional) Custom API endpoint URL\\n\\n"
            SETUP_MSG="${SETUP_MSG}**Note**: GITHUB_TOKEN is automatically provided by GitHub Actions.\\n\\n"
            SETUP_MSG="${SETUP_MSG}3. **Enable workflow permissions:**\\n"
            SETUP_MSG="${SETUP_MSG}   - Go to Settings > Actions > General > Workflow permissions\\n"
            SETUP_MSG="${SETUP_MSG}   - Select \\\"Read and write permissions\\\"\\n"
            SETUP_MSG="${SETUP_MSG}   - Enable \\\"Allow GitHub Actions to create and approve pull requests\\\"\\n\\n"
            SETUP_MSG="${SETUP_MSG}Once configured, add the \`fix-me\` label to any issue for automatic resolution!"
            post_comment "$SETUP_MSG"
          else
            echo "✅ Attempting to run OpenHands resolver..."
            # Activate virtual environment if it was created
            if [ "$RESOLVER_STATUS" = "venv" ]; then
              source resolver_venv/bin/activate
            fi
            
            if python -c "import openhands_resolver.resolve_issue" 2>/dev/null; then
              echo "✅ Running resolver for issue $ISSUE_NUMBER"
              python -m openhands_resolver.resolve_issue \
                --issue-number "$ISSUE_NUMBER" \
                --repo "$REPO_NAME"
            else
              echo "❌ Resolver import failed, posting error"
              IMPORT_ERROR="❌ **OpenHands Resolver Import Error**\\n\\n"
              IMPORT_ERROR="${IMPORT_ERROR}The resolver was installed but cannot be imported. "
              IMPORT_ERROR="${IMPORT_ERROR}This may be due to missing dependencies.\\n\\n"
              IMPORT_ERROR="${IMPORT_ERROR}Please check the [workflow logs]"
              WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              IMPORT_ERROR="${IMPORT_ERROR}($WORKFLOW_URL) for detailed error information.\\n\\n"
              IMPORT_ERROR="${IMPORT_ERROR}For manual resolution, see the "
              IMPORT_ERROR="${IMPORT_ERROR}[TROUBLESHOOTING.md](./TROUBLESHOOTING.md) guide."
              post_comment "$IMPORT_ERROR"
            fi
          fi
